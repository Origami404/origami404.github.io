<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git-impls on Origami404 的 Blog</title>
    <link>https://blog.origami404.top/git-impl/</link>
    <description>Recent content in Git-impls on Origami404 的 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 Feb 2021 22:00:00 +0800</lastBuildDate><atom:link href="https://blog.origami404.top/git-impl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Command: Git 的数据使用方式</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-command/</link>
      <pubDate>Sun, 21 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-command/</guid>
      <description>&lt;p&gt;&lt;strong&gt;此文章施工中&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在让我们来使用上面我们写好的 Git Object 来实现常用的 Git 命令吧.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git Index: Git 的暂存区</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-index/</link>
      <pubDate>Sat, 20 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-index/</guid>
      <description>&lt;p&gt;&lt;strong&gt;此文章施工中&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;二进制格式&#34;&gt;二进制格式&lt;/h2&gt;
&lt;p&gt;前后顺序&lt;strong&gt;均按从低位到高位&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 实现: Object 文件</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-object-file/</link>
      <pubDate>Fri, 19 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-object-file/</guid>
      <description>&lt;h2 id=&#34;导读&#34;&gt;导读&lt;/h2&gt;
&lt;p&gt;本文先介绍了一些方便查看 Git Object 文件 二进制内容的命令行工具, 其次分别介绍了 4 种 Object: &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Commit&lt;/code&gt;, &lt;code&gt;Tree&lt;/code&gt;, &lt;code&gt;Tag&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;每一种 &lt;code&gt;Object&lt;/code&gt; 按&amp;quot;概念模型&amp;quot;与&amp;quot;二进制格式&amp;quot;分隔, 前者主要介绍其储存了那些抽象信息, 后者则专注于其二进制储存格式.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 实现: 目录 &amp; 前言 &amp; Git repo</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-content/</link>
      <pubDate>Fri, 19 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-content/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;写这篇文章一开始主要是受到了 &lt;a href=&#34;https://wyag.thb.lt/&#34; target=&#34;_blank&#34;&gt;Write Yourself a Git&lt;/a&gt;, &lt;a href=&#34;https://zhuanlan.zhihu.com/p/45510461&#34; target=&#34;_blank&#34;&gt;深入理解Git实现原理&lt;/a&gt; 这两篇文章的激励. 俗话说学会使用轮子的最佳方法就是造一个轮子(&lt;del&gt;其实是我刚刚说的&lt;/del&gt;), 而在使用 Python 实现的过程中又多少碰到了点前面两篇文章没有覆盖到的细节点, 特记录于此, 以飨读者.&lt;/p&gt;
&lt;p&gt;本文章介绍顺序是先介绍其存储用的数据结构, 分别按其概念模型(包含了什么信息, 为什么要这样设计)及其二进制格式(储存在文件系统中的格式)来介绍; 随后再描述如何实现 Git 的常用功能.&lt;/p&gt;
&lt;p&gt;本文章不是 Git 的教程, 如果读者对 Git 的操作并非十分了解的话可以参考 ProGit, 一本非常好的 Git 教材.&lt;/p&gt;
&lt;p&gt;本文对于细节扣得有点多, 可能并不适合只想理解 Git 底层模型的读者.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;或者也可以像我一样现学现写&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;本文的配套代码及 Markdown 源码一同发布于 &lt;a href=&#34;https://github.com/Origami404/mgit&#34; target=&#34;_blank&#34;&gt;GitHub: mgit&lt;/a&gt;, 可以配套查看. (顺着 Commit 看我怎么挣扎着理解的说不定别有一番乐趣).&lt;/p&gt;
&lt;p&gt;由于作者水平有限, 时间亦有限, 错漏难免, 还请大佬指正.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
