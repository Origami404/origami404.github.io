<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Origami404 的 Blog</title>
    <link>https://blog.origami404.top/</link>
    <description>Recent content on Origami404 的 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 25 Oct 2022 14:30:00 +0800</lastBuildDate><atom:link href="https://blog.origami404.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LLVM/Clang 源码起步</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2022-10-getting-start-with-clang/</link>
      <pubDate>Tue, 25 Oct 2022 14:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2022-10-getting-start-with-clang/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文章主要记录了我从源码构建 LLVM/Clang 的过程与细节. 注意此文章的目标为构建 Debug 版本与借助代码理解 LLVM/Clang, 而非简单的安装.&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;感谢:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自 &lt;a href=&#34;https://github.com/inclyc&#34; target=&#34;_blank&#34;&gt;inclyc&lt;/a&gt; 的指点&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://llvm.org/docs/GettingStarted.html&#34; target=&#34;_blank&#34;&gt;Getting Started with the LLVM System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/get_started.html&#34; target=&#34;_blank&#34;&gt;Getting Started: Building and Running Clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python 类型标注之追本溯源</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2022-05-py-annotation-2/</link>
      <pubDate>Tue, 03 May 2022 11:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2022-05-py-annotation-2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文是 &lt;a href=&#34;./2020-07-python-and-type-annotations.md&#34;&gt;Python 与 Type Annotations&lt;/a&gt; 的续作. 主要是回顾在那篇文章之前的 Python 类型标注(即 Python 3.6 以及之前版本), 并不过多涉及新的类型标注使用. 主要作用是追本溯源, 固实基础. 接下来我应该还会出一篇介绍这两年来 Python 在类型标注方面的新进展.&lt;/p&gt;
&lt;p&gt;本来呢是想两篇写成一篇的, 但是发现光是回顾历史就占据了过多篇幅, 索性分为两篇, 一篇往前, 一篇往后, 也是一件美事.&lt;/p&gt;
&lt;p&gt;所谓类型标注之本, 在下面的 PEP 里:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-3107/&#34; target=&#34;_blank&#34;&gt;PEP 3107 - Function Annotations&lt;/a&gt; : 最早的类型标注相关 PEP, 描述了对函数参数与返回值做标注的语法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0526/&#34; target=&#34;_blank&#34;&gt;PEP 526 – Syntax for Variable Annotations&lt;/a&gt; : 描述了对变量做标注的语法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0482/&#34; target=&#34;_blank&#34;&gt;PEP 482 – Literature Overview for Type Hints&lt;/a&gt; : 描述了 Python 在设计类型标注的语义时参考了哪些语言/工具/实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0483/&#34; target=&#34;_blank&#34;&gt;PEP 483 – The Theory of Type Hints&lt;/a&gt; : 简要说明了标注应该如何作为 &amp;ldquo;类型提示&amp;rdquo; 使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0484/&#34; target=&#34;_blank&#34;&gt;PEP 484 – Type Hints&lt;/a&gt; : 正式且详细地描述了标注如何作为 &amp;ldquo;类型提示&amp;rdquo; 使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我抽出时间来通读了上面的 PEP, 下面便是我在其中看到的一些或有趣或意料之外的事实 (以及吐槽与思考).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HP Chromebook 13G1 刷机记录</title>
      <link>https://blog.origami404.top/post/2022-04-chromebook/</link>
      <pubDate>Wed, 20 Apr 2022 01:13:06 +0000</pubDate>
      
      <guid>https://blog.origami404.top/post/2022-04-chromebook/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;拿到 Chromebook, 我直接到手就&amp;hellip; 才怪! 我体验了原版 ChromeOS 一两个月, 作为网课机还是很香的. 不过为了自由跟折腾, 我还是决定来刷一个 Debian. 下面是我的刷机记录.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>红米 AC2100 刷机记录</title>
      <link>https://blog.origami404.top/post/2022-04-route/</link>
      <pubDate>Wed, 20 Apr 2022 01:12:56 +0000</pubDate>
      
      <guid>https://blog.origami404.top/post/2022-04-route/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;入手了一个 Redmi AC 2100, 我直接到手就刷 &amp;hellip; 然后就折腾了整整两天.&lt;/p&gt;
&lt;p&gt;在刷机的过程中, 我参考了很多教程, 发现刷机的方法简直多姿多彩, 很多教程走的路都不同. 于是我决定总结一下各种刷机方法的 &amp;ldquo;路径交汇点&amp;rdquo;, 并且在分享本人刷机路径的同时尝试描述其他的可选项, 让读者在将本文与其他教程交叉参阅时心中有数.&lt;/p&gt;
&lt;p&gt;鉴于我初学路由器刷机不过三天, 出错或偏颇恐怕在所难免, 欢迎大佬发邮件指正.&lt;/p&gt;
&lt;p&gt;本文假设读者具有基本的 Linux 与计算机网络知识.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>访问校内服务的错误方法</title>
      <link>https://blog.origami404.top/post/2022-04-visit-intranet-the-wrong-way/</link>
      <pubDate>Mon, 04 Apr 2022 21:30:51 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2022-04-visit-intranet-the-wrong-way/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;好消息: 我校数据结构课程有 OJ 辣!&lt;/p&gt;
&lt;p&gt;坏消息: OJ 搭在校内, 然而现在疫情在上网课 :(&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我阅读网文的信息熵速率</title>
      <link>https://blog.origami404.top/post/2022-03-entropy-rate-of-novel/</link>
      <pubDate>Sat, 19 Mar 2022 22:30:25 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2022-03-entropy-rate-of-novel/</guid>
      <description>&lt;p&gt;最近身体不适, 于是荒废了很多时间来看网文, 现在看完了来无聊来测测我的阅读速率. &lt;del&gt;以此掩盖我看小说摸鱼 21 小时的事实&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>娱乐至死, 但信息时代</title>
      <link>https://blog.origami404.top/post/2022-03-thinking-on-ao2d/</link>
      <pubDate>Tue, 15 Mar 2022 21:59:34 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2022-03-thinking-on-ao2d/</guid>
      <description></description>
    </item>
    
    <item>
      <title>图取样算法简介</title>
      <link>https://blog.origami404.top/post/2022-03-graph-sampling-intro/</link>
      <pubDate>Sat, 12 Mar 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2022-03-graph-sampling-intro/</guid>
      <description>&lt;p&gt;发现了重要的一点: 对人来说, 1k 节点的图跟 10k 节点的图完全没有差别: 都是一团黑糊糊的看不清的玩意. 所以大规模图可视化没有活路, 取样才是真理.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要参考: &lt;a href=&#34;https://github.com/Ashish7129/Graph_Sampling&#34; target=&#34;_blank&#34;&gt;https://github.com/Ashish7129/Graph_Sampling&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>毕昇杯专用 ARMv7 汇编急救</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2022-02-armv7-basic/</link>
      <pubDate>Sun, 13 Feb 2022 21:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2022-02-armv7-basic/</guid>
      <description>&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要参考文章: &lt;a href=&#34;https://thinkingeek.com/arm-assembler-raspberry-pi/&#34; target=&#34;_blank&#34;&gt;https://thinkingeek.com/arm-assembler-raspberry-pi/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝大部分示例代码都是从此文章抄来的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇参考文章偏向于使用 ARM 汇编进行开发的入门, 期望读者水平为学过 C, 还教了一些算法啥的. 作者还有一本书, 200来页, 书比网站上的更加系统, 建议看书.&lt;/p&gt;
&lt;p&gt;当然如果我写错了什么, 那当然是我的问题, 不关作者事.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一份对 ARMv7 汇编的急救指南, 目的是以最快速度提供 &amp;ldquo;实现一个 target 到 ARMv7 的 C 编译器&amp;rdquo; 所需要的 ARM 汇编知识. 本文章假设读者熟悉汇编语言与 C, 至少看过 CSAPP 的第 4 章, 并且了解一些编译技术.&lt;/p&gt;
&lt;p&gt;本文章 &lt;strong&gt;没有&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何对 &lt;strong&gt;不同模式&lt;/strong&gt; 的介绍与说明 (也就是只考虑 User 模式)&lt;/li&gt;
&lt;li&gt;任何对 &lt;strong&gt;浮点运算&lt;/strong&gt; 的介绍与说明&lt;/li&gt;
&lt;li&gt;对一些指令的完全介绍, 比如 ldm/stm&lt;/li&gt;
&lt;li&gt;对规范的完整解释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文章的介绍顺序大体按照那本书里的顺序, 为了方便查阅, 根据主题分类索引如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总览 &amp;amp; 框架: &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%9e%b6%e6%9e%84&#34;&gt;基本架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;寄存器: &lt;a href=&#34;#%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;寄存器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分支: &lt;a href=&#34;#%e5%88%86%e6%94%af-branching&#34;&gt;分支&lt;/a&gt;, &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0%e6%8e%a7%e5%88%b6%e6%b5%81&#34;&gt;控制结构的翻译&lt;/a&gt;, &lt;a href=&#34;#%e6%9d%a1%e4%bb%b6%e6%89%a7%e8%a1%8c&#34;&gt;条件执行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;内存与取址模式: &lt;a href=&#34;#%e5%86%85%e5%ad%98&#34;&gt;内存&lt;/a&gt;, &lt;a href=&#34;#%e6%9b%b4%e7%b4%a7%e5%87%91%e7%9a%84%e6%8c%87%e4%bb%a4--%e5%8f%96%e5%9d%80%e6%a8%a1%e5%bc%8f&#34;&gt;基本取址模式&lt;/a&gt;, &lt;a href=&#34;#%e6%95%b0%e7%bb%84%e4%b8%8e%e7%bb%93%e6%9e%84%e4%bd%93&#34;&gt;load/store 特有的取址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;函数: &lt;a href=&#34;#%e5%87%bd%e6%95%b0&#34;&gt;函数, 但不含栈&lt;/a&gt;, &lt;a href=&#34;#%e6%a0%88&#34;&gt;函数, 但不含局部变量&lt;/a&gt;, &lt;a href=&#34;#%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f&#34;&gt;函数, 齐活了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;动手实践: &lt;a href=&#34;#gdb&#34;&gt;用 GDB 调试汇编程序&lt;/a&gt;, &lt;a href=&#34;#%e5%8a%a8%e6%89%8b%e8%bf%87%e7%a8%8b&#34;&gt;用 GCC 交叉编译 C 代码到 ARMv7 可执行文件并反编译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>购入域名之后...</title>
      <link>https://blog.origami404.top/post/2022-02-domain-and-server-management/</link>
      <pubDate>Thu, 03 Feb 2022 10:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2022-02-domain-and-server-management/</guid>
      <description>&lt;p&gt;记录一下当我买了一个域名之后前前后后的折腾结果, 包含很多概论性的讲解, 应该对还没有配过 HTTPS 的小伙伴有一定的帮助.&lt;/p&gt;
&lt;p&gt;本文的定位大概就是 &amp;ldquo;没吃过猪肉, 还没见过猪跑吗&amp;rdquo; 中的 &amp;ldquo;猪跑&amp;rdquo; 吧.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 7 章：可变量</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-7/</link>
      <pubDate>Fri, 21 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-7/</guid>
      <description>&lt;h2 id=&#34;71-前言&#34;&gt;7.1 前言&lt;/h2&gt;
&lt;p&gt;欢迎来到 &lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0&#34;&gt;我的第一个基于 LLVM 的语言前端&lt;/a&gt; 教程第七章。在前六章我们构建了一门小而强的&lt;a href=&#34;http://en.wikipedia.org/wiki/Functional_programming&#34; target=&#34;_blank&#34;&gt;函数式编程语言&lt;/a&gt;, 从中我们学到了如何去解析程序文本，构建与表示 AST，生成 LLVM IR 以及优化冗余代码和实现即时编译。&lt;/p&gt;
&lt;p&gt;尽管 Kaleidoscope 作为一门函数式语言已经足够优秀，但事实上其函数式特性使得为其生成 LLVM IR 显得 &amp;ldquo;过于简单&amp;rdquo; 了。特别是，函数式的风格令我们特别容易直接构建出 SSA 形式的 LLVM IR &amp;ndash; 而 SSA 经常将那些想用 LLVM 实现一门包含变量的命令式语言的初学者挡在门外。&lt;/p&gt;
&lt;p&gt;幸运的是，你并不需要直接在前端生成 SSA form: 尽管偶尔结果出人意料，但 LLVM 提供了非常健壮的 SSA 构建支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 8 章：编译到目标文件</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-8/</link>
      <pubDate>Tue, 18 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-8/</guid>
      <description>&lt;h2 id=&#34;81-前言&#34;&gt;8.1 前言&lt;/h2&gt;
&lt;p&gt;欢迎来到 &lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0&#34;&gt;我的第一个基于 LLVM 的语言前端&lt;/a&gt; 教程第八章。本章将描述如何将我们实现的语言编译到目标文件 (object file)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 6 章：扩展语言：自定义运算符</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-6/</link>
      <pubDate>Mon, 17 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-6/</guid>
      <description>&lt;h2 id=&#34;61-前言&#34;&gt;6.1 前言&lt;/h2&gt;
&lt;p&gt;欢迎来到 &lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0&#34;&gt;我的第一个基于 LLVM 的语言前端&lt;/a&gt; 教程第六章。麻雀虽小，五脏俱全，现在我们已经有了一个相对完备的小型函数式编程语言。但目前我们的语言还有一个大缺点：它缺少很多有用的运算符 (比如除法和逻辑非，我们甚至还没有除了小于之外的任何比较运算符！)&lt;/p&gt;
&lt;p&gt;本章将会讨论如何让语言支持自定义运算符。诚然，自定义运算符可能让我们的语言变得丑陋 &amp;ndash; 但同时它也能给予我们的语言强大的表达力。自创语言的醍醐味就在于你可以 (并且需要！) 做出你自己的判断，不论是好是坏。本教程将选择允许用户自定义运算符，同时在实现它的过程中讨论一些有趣的语法解析技术。&lt;/p&gt;
&lt;p&gt;在本教程的结尾，我们将编写一个渲染&lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot_set&#34; target=&#34;_blank&#34;&gt;曼德博集合&lt;/a&gt;的 &lt;a href=&#34;#65-%e6%8b%89%e5%87%ba%e6%9d%a5%e6%ba%9c%e6%ba%9c&#34;&gt;Kaleidoscope 程序&lt;/a&gt;。它同时也会作为一个示范，告诉你 Kaleidoscope 的强大之处，以及如何使用 Kaleidoscope 做出更多有趣的事情。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 -1 章 翻译者的话</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch--1/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch--1/</guid>
      <description>&lt;p&gt;本教程原文于 &lt;a href=&#34;https://llvm.org/docs/tutorial/&#34; target=&#34;_blank&#34;&gt;LLVM Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;网上现见有一些翻译：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/liancheng&#34; target=&#34;_blank&#34;&gt;连城&lt;/a&gt; 翻译的：&lt;a href=&#34;https://llvm-tutorial-cn.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34;&gt;用 LLVM 开发新语言&lt;/a&gt;: 比较老，里面的警告还是在警告 LLVM 2.7 版的，而且只有前三章，但其翻译被众多网友引用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://llvm.liuxfe.com/&#34; target=&#34;_blank&#34;&gt;LLVM 中文网&lt;/a&gt; 翻译的：&lt;a href=&#34;https://llvm.liuxfe.com/tutorial/langimpl/&#34; target=&#34;_blank&#34;&gt;LLVM 开发新语言&lt;/a&gt;: 翻译来源不能确定，并且同样只有前三章 + 第四章开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为一个编译技术的入门菜鸟，我很感谢上面这些 (以及千千万万的) 无私付出的翻译者。&lt;/p&gt;
&lt;p&gt;鄙人最近又开始了学习编译技术的学习，在学习之余，也想为社区做一份贡献。于是我斗胆尝试翻译一下本篇教程，重点在之前译者没有翻译的章节上，尽量保证在今年 4 月前翻译完成整个教程。&lt;/p&gt;
&lt;p&gt;因本人水平有限，如有错误，请多多指正、包涵。如有勘误，欢迎提出 issue/pr 于此 &lt;a href=&#34;https://github.com/hitszlug/wiki&#34; target=&#34;_blank&#34;&gt;仓库&lt;/a&gt;. 也可以直接联系本人 Origami404 at foxmail.com&lt;/p&gt;
&lt;p&gt;本翻译同时也发布在 &lt;a href=&#34;https://wiki.hitsz.org/llvm-kaleidoscope/ch--1/&#34; target=&#34;_blank&#34;&gt;HITsz LUG wiki&lt;/a&gt; 上.&lt;/p&gt;
&lt;p&gt;本翻译使用 CC BY-NC-SA 4.0 协议发布到公共领域.&lt;/p&gt;
&lt;p&gt;目录位于 &lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0&#34;&gt;这里&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 0 章 我的第一个基于 LLVM 的语言前端</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;前置技能：&lt;/strong&gt; 本教程要求你有 C++ 基础，但你并不需要先去做一个编译器再来看这个教程。&lt;/p&gt;
&lt;p&gt;欢迎来到“我的第一个基于 LLVM 的语言前端”教程。在本教程我们将会自己动手实现一个简单的语言，你将会看到这有多简单以及有趣。在接下来的教程里，你将会快速而确切地学习到使用 LLVM 来生成程序的方法。&lt;/p&gt;
&lt;p&gt;本教程引入了一门简单的叫 &lt;code&gt;Kaleidoscope&lt;/code&gt;(万花筒) 的语言。在接下来的几章内，我们将会一步步向你展示构建它的过程。在这个过程中我们会介绍一系列的语言设计与 LLVM 思想，给予你实现这门语言的程序的详细代码，并尽量减少各种各样的细节。我们强烈建议你跟着教程一起动手，在我们给予的代码的基础上去 hack，去实验，去探索新的可能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 1 章 Kaleidoscope 与 lexer</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-1/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-1/</guid>
      <description>&lt;p&gt;暂未翻译，敬请参阅连城大佬的&lt;a href=&#34;https://llvm-tutorial-cn.readthedocs.io/en/latest/chapter-1.html#id15&#34; target=&#34;_blank&#34;&gt;译文&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译文较老，请与原文对比以确保自己的代码是更新之后的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本教程其他翻译将基于新版本教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下一章&lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-2&#34;&gt;在此&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 2 章 实现 Parser 与 AST</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-2/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-2/</guid>
      <description>&lt;p&gt;暂未翻译，敬请参阅连城大佬的&lt;a href=&#34;https://llvm-tutorial-cn.readthedocs.io/en/latest/chapter-2.html&#34; target=&#34;_blank&#34;&gt;译文&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译文较老，请与原文对比以确保自己的代码是更新之后的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本教程其他翻译将基于新版本教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下一章&lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-3&#34;&gt;在此&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 3 章 生成 LLVM IR</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-3/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-3/</guid>
      <description>&lt;p&gt;暂未翻译，敬请参阅连城大佬的&lt;a href=&#34;https://llvm-tutorial-cn.readthedocs.io/en/latest/chapter-3.html&#34; target=&#34;_blank&#34;&gt;译文&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译文较老，请与原文对比以确保自己的代码是更新之后的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本教程其他翻译将基于新版本教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下一章&lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-4&#34;&gt;在此&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 4 章 增加 JIT 与优化</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-4/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-4/</guid>
      <description>&lt;h2 id=&#34;41-前言&#34;&gt;4.1 前言&lt;/h2&gt;
&lt;p&gt;欢迎来到 &lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0&#34;&gt;我的第一个基于 LLVM 的语言前端&lt;/a&gt; 教程第四章。前三章描述了一门简单语言的实现与生成 LLVM IR 的过程，而本章将要描述两种新技术 &amp;ndash; 增加优化器 (optimizer) 与 JIT 编译器支持 &amp;ndash; 它们将会告诉你如何生成优雅高效的中间代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LLVM Kaleidoscope 第 5 章 扩展语言：控制流</title>
      <link>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-5/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-5/</guid>
      <description>&lt;h2 id=&#34;51-前言&#34;&gt;5.1 前言&lt;/h2&gt;
&lt;p&gt;欢迎来到 &lt;a href=&#34;https://blog.origami404.top/llvm-kaleidoscope/2022-01-kaleidoscope-ch-0&#34;&gt;我的第一个基于 LLVM 的语言前端&lt;/a&gt; 教程第五章。前四章描述了一门简单语言的实现，生成 LLVM IR 并优化，随后即时编译到本地代码的过程。不幸的是，至少到目前为止，Kaleidoscope 还不堪大用：它没有控制流结构 (除了函数调用与返回). 这意味着你不能用它写出带条件分支的代码，这显著地影响了 Kaleidoscope 的威力。在本章，我们将扩展 Kaleidoscope，使其支持 if/then/else 表达式和一个简单的 for 循环。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>矢量运算与高阶线性结构的构造性定义</title>
      <link>https://blog.origami404.top/post/2021-09-constructive-def-of-vector-operation/</link>
      <pubDate>Thu, 30 Sep 2021 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2021-09-constructive-def-of-vector-operation/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上大学了, 终于有大段的时间来整理数学和物理学内容了.&lt;/p&gt;
&lt;p&gt;本文有其思想上的参考: &lt;a href=&#34;https://www.bilibili.com/video/BV1Gs411R7Yo&#34; target=&#34;_blank&#34;&gt;3b1b: 发明新数学是怎样一种体验？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;最原始的双线性二元运算&#34;&gt;&amp;ldquo;最原始的&amp;quot;双线性二元运算&lt;/h2&gt;
&lt;p&gt;让我们来考虑矢量的运算吧!&lt;/p&gt;
&lt;p&gt;假如我们需要在线性空间 $\mathbb{V}$ 上定义二元运算, 显然我们会希望这个运算至少是线性的, 否则为啥我们要在线性空间上搞呢. 同时如果一个二元运算是双线性的(就是说对于两个操作数而言它都是线性的), 那么我们只需要对 $\mathbb{V}$ 的基底定义此运算即可.&lt;/p&gt;
&lt;p&gt;换句话说, 对于双线性运算 $\mathbf{a} \otimes \mathbf{b}$, 我们可以将其按基底展开:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\mathbf{a} \otimes \mathbf{b}
&amp;amp;= (\sum_{i=1}^n a_i \mathbf{e_i}) \otimes (\sum_{i=1}^n b_i \mathbf{e_i}) \\
&amp;amp;= \sum_{i=1}^n \sum_{j=1}^n a_i b_j (\mathbf{e_i} \otimes \mathbf{e_j})
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;那么, 我们只需要定义所有的 $\mathbf{e_i} \otimes \mathbf{e_j}$ (一共 $n^2$ 个) 即可.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;等等, 这都啥跟啥啊????&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>从外代数出发的行列式理论</title>
      <link>https://blog.origami404.top/post/2021-09-determinant-begin-from-wedge-product/</link>
      <pubDate>Mon, 27 Sep 2021 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2021-09-determinant-begin-from-wedge-product/</guid>
      <description>&lt;h2 id=&#34;前置&#34;&gt;前置&lt;/h2&gt;
&lt;p&gt;这篇文章有些前置知识我默认读者是知道的, 比如矢量和线性空间(&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4&#34; target=&#34;_blank&#34;&gt;wiki&lt;/a&gt;, &lt;a href=&#34;https://www.zhihu.com/question/24086219&#34; target=&#34;_blank&#34;&gt;知乎&lt;/a&gt;)的概念. 具体来讲, 我希望读者能完全理解这句话: &amp;ldquo;基底通过线性组合张成线性空间&amp;rdquo;. 但更加重要的是, 我希望读者能够放开胆子, 接受并批判地思考与新的语言与概念. 文中有些地方我特意没有使用书本的符号, 为的就是让读者直接判断他自己到底是在跟着文章思路走还是靠课本里记下的结论硬看. 通过这篇文章, 我希望能有更多人开始 &amp;ldquo;思考&amp;rdquo; 和 &amp;ldquo;创造&amp;rdquo; 数学, 穿过数学高冷的表面, 看到数学定义背后的 &amp;ldquo;动机&amp;rdquo; 和 &amp;ldquo;深意&amp;rdquo;, 最终享受数学, 而不是只是跟着课本学点计算.&lt;/p&gt;
&lt;p&gt;要知道, 数学家也是人. 一旦你觉得有什么东西是反人类的, 它背后一定是有自己的逻辑. 这里的逻辑, 是数学定义背后数学家们思考的内在的直觉的&lt;strong&gt;人的&lt;/strong&gt;逻辑, 而不完全是死的客观精准的数理逻辑.&lt;/p&gt;
&lt;p&gt;建议餐前食用: &lt;a href=&#34;https://www.bilibili.com/video/BV1Gs411R7Yo&#34; target=&#34;_blank&#34;&gt;3b1b: 发明新数学是怎样一种体验？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;餐后或餐中可以结合: &lt;a href=&#34;https://www.bilibili.com/video/BV1ys411472E&#34; target=&#34;_blank&#34;&gt;3b1b: 线性代数的本质&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比起纯粹的几何直观, 我更看重一种 &amp;ldquo;符号上的直观&amp;rdquo;, 也就是说, 你得把这一套数学符号, 当作与生俱来的, 自然的东西. 所谓直观学习, 不是把所有东西都归纳成你的 &amp;ldquo;直观&amp;rdquo;, 而是让你能把更多的东西变成你的直观.&lt;/p&gt;
&lt;p&gt;鸡汤灌得够多了, 让我们开始吧.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于Bison和Flex的编译器前端实现</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2021-09-compiler-frontend-with-flex-bison/</link>
      <pubDate>Sun, 05 Sep 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2021-09-compiler-frontend-with-flex-bison/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近被某学长介绍了&lt;a href=&#34;https://compiler.educg.net/&#34; target=&#34;_blank&#34;&gt;毕昇杯&lt;/a&gt;编译器比赛, 有点感兴趣, 遂开始用 C 自己实现, 然后就:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;还是 Java 香!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文记录了我用 Bison 和 Flex 来构建 &lt;a href=&#34;https://gitlab.eduxiji.net/nscscc/compiler2021/-/blob/master/SysY%E8%AF%AD%E8%A8%80%E5%AE%9A%E4%B9%89.pdf&#34; target=&#34;_blank&#34;&gt;SysY2021&lt;/a&gt; 语言前端的尝试.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git Command: Git 的数据使用方式</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-command/</link>
      <pubDate>Sun, 21 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-command/</guid>
      <description>&lt;p&gt;&lt;strong&gt;此文章施工中&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在让我们来使用上面我们写好的 Git Object 来实现常用的 Git 命令吧.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git Index: Git 的暂存区</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-index/</link>
      <pubDate>Sat, 20 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-index/</guid>
      <description>&lt;p&gt;&lt;strong&gt;此文章施工中&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;二进制格式&#34;&gt;二进制格式&lt;/h2&gt;
&lt;p&gt;前后顺序&lt;strong&gt;均按从低位到高位&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 实现: Object 文件</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-object-file/</link>
      <pubDate>Fri, 19 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-object-file/</guid>
      <description>&lt;h2 id=&#34;导读&#34;&gt;导读&lt;/h2&gt;
&lt;p&gt;本文先介绍了一些方便查看 Git Object 文件 二进制内容的命令行工具, 其次分别介绍了 4 种 Object: &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Commit&lt;/code&gt;, &lt;code&gt;Tree&lt;/code&gt;, &lt;code&gt;Tag&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;每一种 &lt;code&gt;Object&lt;/code&gt; 按&amp;quot;概念模型&amp;quot;与&amp;quot;二进制格式&amp;quot;分隔, 前者主要介绍其储存了那些抽象信息, 后者则专注于其二进制储存格式.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 实现: 目录 &amp; 前言 &amp; Git repo</title>
      <link>https://blog.origami404.top/git-impl/2021-02-git-impl-content/</link>
      <pubDate>Fri, 19 Feb 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/git-impl/2021-02-git-impl-content/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;写这篇文章一开始主要是受到了 &lt;a href=&#34;https://wyag.thb.lt/&#34; target=&#34;_blank&#34;&gt;Write Yourself a Git&lt;/a&gt;, &lt;a href=&#34;https://zhuanlan.zhihu.com/p/45510461&#34; target=&#34;_blank&#34;&gt;深入理解Git实现原理&lt;/a&gt; 这两篇文章的激励. 俗话说学会使用轮子的最佳方法就是造一个轮子(&lt;del&gt;其实是我刚刚说的&lt;/del&gt;), 而在使用 Python 实现的过程中又多少碰到了点前面两篇文章没有覆盖到的细节点, 特记录于此, 以飨读者.&lt;/p&gt;
&lt;p&gt;本文章介绍顺序是先介绍其存储用的数据结构, 分别按其概念模型(包含了什么信息, 为什么要这样设计)及其二进制格式(储存在文件系统中的格式)来介绍; 随后再描述如何实现 Git 的常用功能.&lt;/p&gt;
&lt;p&gt;本文章不是 Git 的教程, 如果读者对 Git 的操作并非十分了解的话可以参考 ProGit, 一本非常好的 Git 教材.&lt;/p&gt;
&lt;p&gt;本文对于细节扣得有点多, 可能并不适合只想理解 Git 底层模型的读者.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;或者也可以像我一样现学现写&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;本文的配套代码及 Markdown 源码一同发布于 &lt;a href=&#34;https://github.com/Origami404/mgit&#34; target=&#34;_blank&#34;&gt;GitHub: mgit&lt;/a&gt;, 可以配套查看. (顺着 Commit 看我怎么挣扎着理解的说不定别有一番乐趣).&lt;/p&gt;
&lt;p&gt;由于作者水平有限, 时间亦有限, 错漏难免, 还请大佬指正.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UEFI下的引导恢复</title>
      <link>https://blog.origami404.top/post/2020-10-boot-recovery-in-uefi/</link>
      <pubDate>Sat, 31 Oct 2020 23:22:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2020-10-boot-recovery-in-uefi/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;想调整一下分区大小, 结果一不小心删掉了 ESP&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Anbox 踩坑 &amp; Manjaro 下的内核编译</title>
      <link>https://blog.origami404.top/post/2020-10-anbox-and-compile-kernel/</link>
      <pubDate>Fri, 02 Oct 2020 23:22:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2020-10-anbox-and-compile-kernel/</guid>
      <description>&lt;h2 id=&#34;前言--anbox-简介&#34;&gt;前言 &amp;amp; Anbox 简介&lt;/h2&gt;
&lt;p&gt;最近换回了 Manjaro 和 Xfce, 打算认认真真地开始将 Linux 作为日常生活系统而不仅仅是开发系统来用了. 然而在日常生活中, 总归是逃不掉某国产IM的 :(. 为了实现以 Manjaro 作为生活主力系统的目标, (同时也为了以后说不定能愉快地打游戏), 决定安装一个能跑安卓应用的东西. 于是我的 Anbox 之旅就在完全搞不懂 Android x86 是什么玩意的情况下展开了.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://anbox.io/&#34; target=&#34;_blank&#34;&gt;Anbox 官网&lt;/a&gt;上的介绍:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anbox: Android in a Box
Run Android applications on any GNU/Linux operating system.
Anbox puts the Android operating system into a container, abstracts hardware access and integrates core system services into a GNU/Linux system. Every Android application will be integrated with your operating system like any other native application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来讲就类似 docker , 利用 LXD 技术在 Linux 系统里新建一个全新的容器, 然后直接去跑一个 Android x86. 好处嘛就是跑得比虚拟机快, 集成度比虚拟机好. 坏处嘛就是兼容性还是有待提高&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 与 Type Annotations</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2020-07-python-and-type-annotations/</link>
      <pubDate>Tue, 21 Jul 2020 11:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2020-07-python-and-type-annotations/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;用Python写了个Scheme解释器, &lt;a href=&#34;https://github.com/Origami404/SmallScheme&#34; target=&#34;_blank&#34;&gt;代码&lt;/a&gt;. 记录一下Python的类型标注要怎么用, 有什么坑.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;话说回来这好像是我第一篇技术性文章&amp;hellip;?&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不务正业实锤&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文假定您已有支持编译期泛型的静态类型语言的编程背景, 比如C++, Haskell之类的.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Category-theory-for-programmers 阅读笔记</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2020-04-notes-on-category-theory-for-programmers/</link>
      <pubDate>Thu, 16 Apr 2020 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2020-04-notes-on-category-theory-for-programmers/</guid>
      <description>&lt;h2 id=&#34;前言--介绍&#34;&gt;前言 &amp;amp; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Category Theory for Programmers&lt;/code&gt;, 顾名思义, 是一本关于范畴论的书, 但是偏向CS而非数学.&lt;/p&gt;
&lt;p&gt;书的$\LaTeX$代码以&lt;code&gt;GPL-3.0&lt;/code&gt;公布在&lt;a href=&#34;https://github.com/hmemcpy/milewski-ctfp-pdf&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;, 有两个版本, 一个以&lt;code&gt;C++&lt;/code&gt;作为辅助说明语言, 另一个是&lt;code&gt;Scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;作为一个蒟蒻OI党当然是选择&lt;code&gt;C++&lt;/code&gt;版啦.&lt;/p&gt;
&lt;p&gt;本文(如果不咕咕咕的话)会持续更新, 大概记录一些摘录或者感想或者我不知道的东西&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win10下Haskell开发环境的配置</title>
      <link>https://blog.origami404.top/post/2020-04-haskell-dev-in-win10/</link>
      <pubDate>Tue, 14 Apr 2020 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2020-04-haskell-dev-in-win10/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;时隔半年再次开始学&lt;code&gt;Haskell&lt;/code&gt;, 然后在配环境中度过了一个哭笑不得的下午&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win10重装与MSR分区</title>
      <link>https://blog.origami404.top/post/2020-04-win10-and-msr/</link>
      <pubDate>Wed, 08 Apr 2020 09:45:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2020-04-win10-and-msr/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;大概1月底, 辣鸡win10的更新就更不上去了, 然后我折腾了好久&amp;hellip;包括各种系统检查啊手动安装啊, 无果. 最后在3月决定干脆删了重装&amp;hellip;&lt;/p&gt;
&lt;p&gt;重装过程中遇到了大大小小的问题, 写个文章记录一下.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;3月的事拖到4月写, 咕咕咕实锤&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>变分学基本定理</title>
      <link>https://blog.origami404.top/post/2020-01-basic-of-calculus-of-variations/</link>
      <pubDate>Fri, 31 Jan 2020 17:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2020-01-basic-of-calculus-of-variations/</guid>
      <description>&lt;p&gt;在&lt;del&gt;试卷&lt;/del&gt;现实生活中, 总是会碰到一些泛函上的最优化问题. 它们大多可以归为以下形式:&lt;/p&gt;
&lt;p&gt;在函数集合&lt;/p&gt;
&lt;p&gt;$$
\left\{ x(t) \ \Big| \ x(t_1) = y_1, x(t_2) = y_2, x^{(k)} 存在 \right\}
$$&lt;/p&gt;
&lt;p&gt;中, 求一个函数 $x(t)$ 使得泛函 $I[x(\centerdot)]$ 的积分:&lt;/p&gt;
&lt;p&gt;$$
S = \int_{t_1}^{t_2} I[x, x&amp;rsquo;, t] \ \mathrm{d}x
$$&lt;/p&gt;
&lt;p&gt;有极值.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arch Alacritty 配置</title>
      <link>https://blog.origami404.top/linux-conf/2020-01-arch-alacritty/</link>
      <pubDate>Wed, 29 Jan 2020 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/linux-conf/2020-01-arch-alacritty/</guid>
      <description>&lt;p&gt;应某人推荐, 终端模拟器使用了&lt;code&gt;Alacritty&lt;/code&gt;, 特此记录.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arch AwesomeWM 配置</title>
      <link>https://blog.origami404.top/linux-conf/2020-01-arch-awesome-wm/</link>
      <pubDate>Wed, 29 Jan 2020 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/linux-conf/2020-01-arch-awesome-wm/</guid>
      <description>&lt;p&gt;配个awesome.&lt;/p&gt;
&lt;p&gt;主要痛点有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务栏在上面, 并且有一堆很讨厌的东西, 比如什么启动菜单啊, 当前任务啊, 键盘键位等&lt;/li&gt;
&lt;li&gt;默认layout居然是floating, 理解不能&lt;/li&gt;
&lt;li&gt;tag居然是全部显示然后有东西就有个点, 这样看起来很累&lt;/li&gt;
&lt;li&gt;快捷键不合我口味&lt;/li&gt;
&lt;li&gt;壁纸有点丑啊&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Arch CLI工具 安装记录</title>
      <link>https://blog.origami404.top/linux-conf/2020-01-arch-install-cli/</link>
      <pubDate>Wed, 29 Jan 2020 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/linux-conf/2020-01-arch-install-cli/</guid>
      <description>&lt;p&gt;接着&lt;a href=&#34;../Arch%20%e5%ae%89%e8%a3%85%e8%ae%b0%e5%bd%95&#34;&gt;上文&lt;/a&gt;, 记录一些常用的CLI工具&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arch GUI 配置</title>
      <link>https://blog.origami404.top/linux-conf/2020-01-arch-install-gui/</link>
      <pubDate>Wed, 29 Jan 2020 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/linux-conf/2020-01-arch-install-gui/</guid>
      <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;桌面环境这次选择了X+awesome, wayland现在还是太折腾了, 并且还有输入法这一个大坑. 用过i3之后对浮动式wm就再也提不起兴趣, 同时因为用了一阵子i3, 决定换个口味, 试试配一个awesome.&lt;/p&gt;
&lt;p&gt;dm用的是lightdm, greeter用了lightdm-webkit2-greeter(因为好看2333), 主题选择了&lt;a href=&#34;https://github.com/Litarvan/lightdm-webkit-theme-litarvan&#34; target=&#34;_blank&#34;&gt;这一个&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;终端模拟器用了alacritty, 主题选了&lt;a href=&#34;https://github.com/dracula/alacritty&#34; target=&#34;_blank&#34;&gt;这一个&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arch LightDM 配置</title>
      <link>https://blog.origami404.top/linux-conf/2020-01-arch-lightdm/</link>
      <pubDate>Wed, 29 Jan 2020 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/linux-conf/2020-01-arch-lightdm/</guid>
      <description>&lt;h2 id=&#34;简要名词介绍&#34;&gt;简要名词介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WM: Windows Manager, 用于登录之后管理窗口的玩意&lt;/li&gt;
&lt;li&gt;DM: Display Manager, 提供登录之前跟登录界面&lt;/li&gt;
&lt;li&gt;Greeter: 用来提供登录界面, 依赖于特定的DM&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Arch Nvidia 闭源驱动 配置</title>
      <link>https://blog.origami404.top/linux-conf/2020-01-arch-nvidia/</link>
      <pubDate>Wed, 29 Jan 2020 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/linux-conf/2020-01-arch-nvidia/</guid>
      <description>&lt;p&gt;其实开源驱动已经很好了, 但是颜色看起来总是怪怪的&amp;hellip;&lt;/p&gt;
&lt;p&gt;白色跟浅浅的黄白之间的交界简直awful&amp;hellip;令人窒息, 特别是每次打开google都得看一次, 辣眼睛.&lt;/p&gt;
&lt;p&gt;一开始以为是颜色深度的问题, 因为win下是32位, 开源驱动下是24位, 但是怎么搞都搞不上32位, 遂放弃.&lt;/p&gt;
&lt;p&gt;后来一狠心, 装了闭源驱动, 发现并不是颜色深度的问题, 而是一个叫Color Range的玩意的问题, 于是特此记录.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arch 安装记录</title>
      <link>https://blog.origami404.top/linux-conf/2020-01-arch-install-basic/</link>
      <pubDate>Wed, 29 Jan 2020 19:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/linux-conf/2020-01-arch-install-basic/</guid>
      <description>&lt;p&gt;简单记录一下安装arch时需要的命令. (虽然&lt;code&gt;install.txt&lt;/code&gt;里都有了)&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;code&gt;install.txt&lt;/code&gt;复读机&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你还不知道Arch是什么, 可以&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/Arch_Linux&#34; target=&#34;_blank&#34;&gt;戳这里看看维基&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;打开作弊指南-installtxt&#34;&gt;打开&lt;del&gt;作弊指南&lt;/del&gt; install.txt&lt;/h2&gt;
&lt;p&gt;为了方便安装, 在启动完arch镜像后, &lt;code&gt;/root&lt;/code&gt;下有一个&lt;code&gt;install.txt&lt;/code&gt;, 打开就是安装所需的大部分步骤, 然后就可以一边看着一边抄了.&lt;/p&gt;
&lt;p&gt;一开始我用&lt;code&gt;Ctrl+Alt+F2&lt;/code&gt;开多一个虚拟终端然后在&lt;code&gt;F1&lt;/code&gt;和&lt;code&gt;F2&lt;/code&gt;之间切换着抄, 后来&lt;code&gt;vim&lt;/code&gt;支持虚拟终端之后就直接&lt;code&gt;vim&lt;/code&gt;抄美滋滋.&lt;/p&gt;
&lt;p&gt;具体做法是用&lt;code&gt;vim&lt;/code&gt;打开&lt;code&gt;install.txt&lt;/code&gt;之后, 在&lt;code&gt;normal&lt;/code&gt;模式下键入&lt;code&gt;:term&lt;/code&gt;就可以打开一个终端. 然后按&lt;code&gt;Ctrl+Shift+h/j/k/l&lt;/code&gt;就可以挪终端位置, 挪到喜欢的位置就可以开抄(?)了.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.origami404.top/about/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/about/</guid>
      <description>大学生, 2021 年起就读于 HITsz. 是 HITsz Linux User Group 的成员, 偶尔也会在 HITsz LUG wiki 上写点东西. 初中出于无聊学了 C++, 高中以打 OI 的名义彻底接触了 CS 的方方面面. 比起研究者更像工程师. 打 OI 心累了, 不打 ACM. 最近作为兴趣爱好主要在学编译原理啊</description>
    </item>
    
    <item>
      <title>Blog 搭建</title>
      <link>https://blog.origami404.top/post/2019-07-blog-init/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/post/2019-07-blog-init/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;忽然想建个blog来记录自己没填的坑了&amp;hellip;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
