<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compiler-and-type-theories on Origami404 的 Blog</title>
    <link>https://blog.origami404.top/compiler-and-type-theory/</link>
    <description>Recent content in Compiler-and-type-theories on Origami404 的 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 13 Feb 2022 21:00:00 +0800</lastBuildDate><atom:link href="https://blog.origami404.top/compiler-and-type-theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>毕昇杯专用 ARMv7 汇编急救</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2022-02-armv7-basic/</link>
      <pubDate>Sun, 13 Feb 2022 21:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2022-02-armv7-basic/</guid>
      <description>总览 主要参考文章: https://thinkingeek.com/arm-assembler-raspberry-pi/ 绝大部分示例代码都是从此文章抄来的 这篇参考文章偏向于使用 ARM 汇编进行开发的入门, 期望读者水平为学过 C, 还教了一些算法啥的. 作者还有一本书, 200来页, 书比网站上的更加系统, 建议看书. 当</description>
    </item>
    
    <item>
      <title>基于Bison和Flex的编译器前端实现</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2021-09-compiler-frontend-with-flex-bison/</link>
      <pubDate>Sun, 05 Sep 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2021-09-compiler-frontend-with-flex-bison/</guid>
      <description>前言 最近被某学长介绍了毕昇杯编译器比赛, 有点感兴趣, 遂开始用 C 自己实现, 然后就: 还是 Java 香! 本文记录了我用 Bison 和 Flex 来构建 SysY2021 语言前端的尝试. Show me the code. 前置声明: 大体的代码架构和使用方法在最后, 可以交叉着看. lex</description>
    </item>
    
    <item>
      <title>Python 与 Type Annotations</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2020-07-python-and-type-annotations/</link>
      <pubDate>Tue, 21 Jul 2020 11:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2020-07-python-and-type-annotations/</guid>
      <description>前言 用Python写了个Scheme解释器, 代码. 记录一下Python的类型标注要怎么用, 有什么坑. 话说回来这好像是我第一篇技术性文章&amp;hellip;? 不务正业实锤 本文假定您已有支持编译期泛型的静态类</description>
    </item>
    
    <item>
      <title>Category-theory-for-programmers 阅读笔记</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2020-04-notes-on-category-theory-for-programmers/</link>
      <pubDate>Thu, 16 Apr 2020 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2020-04-notes-on-category-theory-for-programmers/</guid>
      <description>前言 &amp;amp; 介绍 Category Theory for Programmers, 顾名思义, 是一本关于范畴论的书, 但是偏向CS而非数学. 书的$\LaTeX$代码以GPL-3.0公布在GitHub, 有两个版本, 一个以C++作为辅助说明语言, 另一个是Scala. 作为一</description>
    </item>
    
  </channel>
</rss>
