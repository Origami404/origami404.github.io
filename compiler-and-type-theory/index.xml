<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compiler-and-type-theories on Origami404 的 Blog</title>
    <link>https://blog.origami404.top/compiler-and-type-theory/</link>
    <description>Recent content in Compiler-and-type-theories on Origami404 的 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 03 May 2022 11:30:00 +0800</lastBuildDate><atom:link href="https://blog.origami404.top/compiler-and-type-theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 类型标注之追本溯源</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2022-05-py-annotation-2/</link>
      <pubDate>Tue, 03 May 2022 11:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2022-05-py-annotation-2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文是 &lt;a href=&#34;./2020-07-python-and-type-annotations.md&#34;&gt;Python 与 Type Annotations&lt;/a&gt; 的续作. 主要是回顾在那篇文章之前的 Python 类型标注(即 Python 3.6 以及之前版本), 并不过多涉及新的类型标注使用. 主要作用是追本溯源, 固实基础. 接下来我应该还会出一篇介绍这两年来 Python 在类型标注方面的新进展.&lt;/p&gt;
&lt;p&gt;本来呢是想两篇写成一篇的, 但是发现光是回顾历史就占据了过多篇幅, 索性分为两篇, 一篇往前, 一篇往后, 也是一件美事.&lt;/p&gt;
&lt;p&gt;所谓类型标注之本, 在下面的 PEP 里:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-3107/&#34; target=&#34;_blank&#34;&gt;PEP 3107 - Function Annotations&lt;/a&gt; : 最早的类型标注相关 PEP, 描述了对函数参数与返回值做标注的语法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0526/&#34; target=&#34;_blank&#34;&gt;PEP 526 – Syntax for Variable Annotations&lt;/a&gt; : 描述了对变量做标注的语法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0482/&#34; target=&#34;_blank&#34;&gt;PEP 482 – Literature Overview for Type Hints&lt;/a&gt; : 描述了 Python 在设计类型标注的语义时参考了哪些语言/工具/实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0483/&#34; target=&#34;_blank&#34;&gt;PEP 483 – The Theory of Type Hints&lt;/a&gt; : 简要说明了标注应该如何作为 &amp;ldquo;类型提示&amp;rdquo; 使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peps.python.org/pep-0484/&#34; target=&#34;_blank&#34;&gt;PEP 484 – Type Hints&lt;/a&gt; : 正式且详细地描述了标注如何作为 &amp;ldquo;类型提示&amp;rdquo; 使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我抽出时间来通读了上面的 PEP, 下面便是我在其中看到的一些或有趣或意料之外的事实 (以及吐槽与思考).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>毕昇杯专用 ARMv7 汇编急救</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2022-02-armv7-basic/</link>
      <pubDate>Sun, 13 Feb 2022 21:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2022-02-armv7-basic/</guid>
      <description>&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要参考文章: &lt;a href=&#34;https://thinkingeek.com/arm-assembler-raspberry-pi/&#34; target=&#34;_blank&#34;&gt;https://thinkingeek.com/arm-assembler-raspberry-pi/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝大部分示例代码都是从此文章抄来的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇参考文章偏向于使用 ARM 汇编进行开发的入门, 期望读者水平为学过 C, 还教了一些算法啥的. 作者还有一本书, 200来页, 书比网站上的更加系统, 建议看书.&lt;/p&gt;
&lt;p&gt;当然如果我写错了什么, 那当然是我的问题, 不关作者事.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一份对 ARMv7 汇编的急救指南, 目的是以最快速度提供 &amp;ldquo;实现一个 target 到 ARMv7 的 C 编译器&amp;rdquo; 所需要的 ARM 汇编知识. 本文章假设读者熟悉汇编语言与 C, 至少看过 CSAPP 的第 4 章, 并且了解一些编译技术.&lt;/p&gt;
&lt;p&gt;本文章 &lt;strong&gt;没有&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何对 &lt;strong&gt;不同模式&lt;/strong&gt; 的介绍与说明 (也就是只考虑 User 模式)&lt;/li&gt;
&lt;li&gt;任何对 &lt;strong&gt;浮点运算&lt;/strong&gt; 的介绍与说明&lt;/li&gt;
&lt;li&gt;对一些指令的完全介绍, 比如 ldm/stm&lt;/li&gt;
&lt;li&gt;对规范的完整解释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文章的介绍顺序大体按照那本书里的顺序, 为了方便查阅, 根据主题分类索引如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总览 &amp;amp; 框架: &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%9e%b6%e6%9e%84&#34;&gt;基本架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;寄存器: &lt;a href=&#34;#%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;寄存器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分支: &lt;a href=&#34;#%e5%88%86%e6%94%af-branching&#34;&gt;分支&lt;/a&gt;, &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0%e6%8e%a7%e5%88%b6%e6%b5%81&#34;&gt;控制结构的翻译&lt;/a&gt;, &lt;a href=&#34;#%e6%9d%a1%e4%bb%b6%e6%89%a7%e8%a1%8c&#34;&gt;条件执行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;内存与取址模式: &lt;a href=&#34;#%e5%86%85%e5%ad%98&#34;&gt;内存&lt;/a&gt;, &lt;a href=&#34;#%e6%9b%b4%e7%b4%a7%e5%87%91%e7%9a%84%e6%8c%87%e4%bb%a4--%e5%8f%96%e5%9d%80%e6%a8%a1%e5%bc%8f&#34;&gt;基本取址模式&lt;/a&gt;, &lt;a href=&#34;#%e6%95%b0%e7%bb%84%e4%b8%8e%e7%bb%93%e6%9e%84%e4%bd%93&#34;&gt;load/store 特有的取址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;函数: &lt;a href=&#34;#%e5%87%bd%e6%95%b0&#34;&gt;函数, 但不含栈&lt;/a&gt;, &lt;a href=&#34;#%e6%a0%88&#34;&gt;函数, 但不含局部变量&lt;/a&gt;, &lt;a href=&#34;#%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f&#34;&gt;函数, 齐活了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;动手实践: &lt;a href=&#34;#gdb&#34;&gt;用 GDB 调试汇编程序&lt;/a&gt;, &lt;a href=&#34;#%e5%8a%a8%e6%89%8b%e8%bf%87%e7%a8%8b&#34;&gt;用 GCC 交叉编译 C 代码到 ARMv7 可执行文件并反编译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>基于Bison和Flex的编译器前端实现</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2021-09-compiler-frontend-with-flex-bison/</link>
      <pubDate>Sun, 05 Sep 2021 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2021-09-compiler-frontend-with-flex-bison/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近被某学长介绍了&lt;a href=&#34;https://compiler.educg.net/&#34; target=&#34;_blank&#34;&gt;毕昇杯&lt;/a&gt;编译器比赛, 有点感兴趣, 遂开始用 C 自己实现, 然后就:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;还是 Java 香!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文记录了我用 Bison 和 Flex 来构建 &lt;a href=&#34;https://gitlab.eduxiji.net/nscscc/compiler2021/-/blob/master/SysY%E8%AF%AD%E8%A8%80%E5%AE%9A%E4%B9%89.pdf&#34; target=&#34;_blank&#34;&gt;SysY2021&lt;/a&gt; 语言前端的尝试.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 与 Type Annotations</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2020-07-python-and-type-annotations/</link>
      <pubDate>Tue, 21 Jul 2020 11:30:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2020-07-python-and-type-annotations/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;用Python写了个Scheme解释器, &lt;a href=&#34;https://github.com/Origami404/SmallScheme&#34; target=&#34;_blank&#34;&gt;代码&lt;/a&gt;. 记录一下Python的类型标注要怎么用, 有什么坑.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;话说回来这好像是我第一篇技术性文章&amp;hellip;?&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不务正业实锤&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文假定您已有支持编译期泛型的静态类型语言的编程背景, 比如C++, Haskell之类的.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Category-theory-for-programmers 阅读笔记</title>
      <link>https://blog.origami404.top/compiler-and-type-theory/2020-04-notes-on-category-theory-for-programmers/</link>
      <pubDate>Thu, 16 Apr 2020 22:00:00 +0800</pubDate>
      
      <guid>https://blog.origami404.top/compiler-and-type-theory/2020-04-notes-on-category-theory-for-programmers/</guid>
      <description>&lt;h2 id=&#34;前言--介绍&#34;&gt;前言 &amp;amp; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Category Theory for Programmers&lt;/code&gt;, 顾名思义, 是一本关于范畴论的书, 但是偏向CS而非数学.&lt;/p&gt;
&lt;p&gt;书的$\LaTeX$代码以&lt;code&gt;GPL-3.0&lt;/code&gt;公布在&lt;a href=&#34;https://github.com/hmemcpy/milewski-ctfp-pdf&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;, 有两个版本, 一个以&lt;code&gt;C++&lt;/code&gt;作为辅助说明语言, 另一个是&lt;code&gt;Scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;作为一个蒟蒻OI党当然是选择&lt;code&gt;C++&lt;/code&gt;版啦.&lt;/p&gt;
&lt;p&gt;本文(如果不咕咕咕的话)会持续更新, 大概记录一些摘录或者感想或者我不知道的东西&amp;hellip;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
